import type { IElement, IGroupMark as IVGrammarGroupMark } from '@visactor/vgrammar-core';
import { BaseModel } from '../model/base-model';
import type { ISeries } from '../series/interface';
import type { IModelOption, ILayoutItem } from '../model/interface';
import type { CoordinateType } from '../typings/coordinate';
import type { IRegion, IRegionSpec } from './interface';
import type { IGroupMark } from '../mark/group';
import type { IInteraction, ITrigger } from '../interaction/interface';
import type { IRectMark } from '../mark/rect';
import type { IAnimate } from '../animation/interface';
import type { StringOrNumber } from '../typings';
export declare class Region<T extends IRegionSpec = IRegionSpec> extends BaseModel<T> implements IRegion {
  static type: string;
  readonly modelType: string;
  type: string;
  protected _series: ISeries[];
  layoutType: ILayoutItem['layoutType'];
  layoutZIndex: number;
  animate?: IAnimate;
  interaction: IInteraction;
  protected _maxRegionWidth?: number;
  getMaxWidth(): number;
  setMaxWidth(value: number): void;
  protected _maxRegionHeight?: number;
  getMaxHeight(): number;
  setMaxHeight(value: number): void;
  protected _groupMark: IGroupMark;
  getGroupMark(): IGroupMark;
  getStackInverse(): boolean;
  protected _backgroundMark?: IRectMark;
  protected _foregroundMark?: IRectMark;
  protected _trigger: ITrigger;
  constructor(spec: T, ctx: IModelOption);
  protected _getClipDefaultValue(): boolean;
  created(): void;
  init(option: any): void;
  initMark(): void;
  protected _initBackgroundMarkStyle(): void;
  protected _initForegroundMarkStyle(): void;
  _compareSpec(): {
    change: boolean;
    reMake: boolean;
    reRender: boolean;
    reSize: boolean;
    reCompile: boolean;
  };
  reInit(theme?: any): void;
  addSeries(s: ISeries): void;
  removeSeries(s: ISeries): void;
  getSeries(opt?: {
    name?: string;
    userId?: StringOrNumber | StringOrNumber[];
    specIndex?: number | number[];
    id?: StringOrNumber;
    type?: string;
    coordinateType?: CoordinateType;
    dataName?: string;
  }): ISeries[];
  getSeriesInName(name: string): ISeries;
  getSeriesInUserId(userId: string): ISeries;
  getSeriesInId(id: number): ISeries;
  getSeriesInType(type: string): ISeries[];
  getSeriesInCoordinateType(coordinateType: CoordinateType): ISeries[];
  getSeriesInDataName(dataName: string): ISeries[];
  onRender(ctx: any): void;
  initSeriesDataflow(): void;
  seriesDataFilterOver: () => void;
  release(): void;
  createTrigger(): void;
  initTrigger(): void;
  initInteraction(): void;
  compileMarks(group?: string | IVGrammarGroupMark): void;
  compileSignal(): void;
  compile(): void;
  bindSceneNode(node: IElement): void;
}
