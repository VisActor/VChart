import { CartesianSeries } from '../cartesian/cartesian';
import type { IMark, IMarkProgressiveConfig } from '../../mark/interface';
import { MarkTypeEnum } from '../../mark/interface/type';
import type { Maybe, Datum, DirectionType } from '../../typings';
import type { IBarSeriesSpec, IBarSeriesTheme } from './interface';
import type { IAxisHelper } from '../../component/axis/cartesian/interface';
import type { IRectMark } from '../../mark/rect';
import type { IModelInitOption } from '../../model/interface';
import type { ITextMark } from '../../mark/text';
import type { SeriesMarkMap } from '../interface';
import { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';
import { SeriesData } from '../base/series-data';
import { DataView } from '@visactor/vdataset';
export declare const DefaultBandWidth = 6;
export declare class BarSeries<T extends IBarSeriesSpec = IBarSeriesSpec> extends CartesianSeries<T> {
    static readonly type: string;
    type: SeriesTypeEnum;
    protected _barMarkName: SeriesMarkNameEnum;
    protected _barMarkType: MarkTypeEnum;
    static readonly mark: SeriesMarkMap;
    protected _theme: Maybe<IBarSeriesTheme>;
    protected _supportStack: boolean;
    protected _bandPosition: number;
    protected _barMark: IRectMark;
    protected _barBackgroundMark: IRectMark;
    protected _barBackgroundViewData: SeriesData;
    initMark(): void;
    protected _initBarBackgroundMark(progressive?: IMarkProgressiveConfig): void;
    initMarkStyle(): void;
    initLabelMarkStyle(textMark: ITextMark): void;
    protected initTooltip(): void;
    protected _statisticViewData(): void;
    init(option: IModelInitOption): void;
    private _shouldDoPreCalculate;
    private _calculateStackRectPosition;
    private _calculateRectPosition;
    initBandRectMarkStyle(): void;
    protected _initBarBackgroundMarkStyle(): void;
    initLinearRectMarkStyle(): void;
    initAnimation(): void;
    protected _getBarWidth(axisHelper: IAxisHelper): number;
    protected _getPosition(direction: DirectionType, datum: Datum): number;
    onLayoutEnd(ctx: any): void;
    getDefaultShapeType(): string;
    getActiveMarks(): IMark[];
    compileData(): void;
    fillData(): void;
    viewDataUpdate(d: DataView): void;
    release(): void;
}
export declare const registerBarSeries: () => void;
