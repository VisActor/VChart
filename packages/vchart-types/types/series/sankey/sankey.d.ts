import { CartesianSeries } from '../cartesian/cartesian';
import type { SeriesMarkMap } from '../interface';
import { SeriesTypeEnum } from '../interface/type';
import type { Datum } from '../../typings';
import { SeriesData } from '../base/series-data';
import type { ISankeySeriesSpec } from './interface';
import type { ExtendEventParam } from '../../event/interface';
import type { IElement, IGlyphElement } from '@visactor/vgrammar-core';
import type { IMark } from '../../mark/interface';
export declare class SankeySeries<T extends ISankeySeriesSpec = ISankeySeriesSpec> extends CartesianSeries<T> {
    static readonly type: string;
    type: SeriesTypeEnum;
    static readonly mark: SeriesMarkMap;
    private _nodeMark;
    private _linkMark;
    private _labelMark?;
    private _nodeLayoutZIndex;
    private _labelLayoutZIndex;
    private _labelLimit;
    protected _nodesSeriesData?: SeriesData;
    protected _linksSeriesData?: SeriesData;
    private _viewBox;
    protected _categoryField: string;
    private _colorScale;
    getCategoryField(): string;
    setCategoryField(f: string): string;
    protected _valueField: string;
    getValueField(): string;
    setValueField(f: string): string;
    setAttrFromSpec(): void;
    initData(): void;
    initMark(): void;
    initMarkStyle(): void;
    protected _initNodeMarkStyle(): void;
    protected _initLinkMarkStyle(): void;
    protected _initLabelMarkStyle(): void;
    private _createText;
    initAnimation(): void;
    protected initEvent(): void;
    private nodesSeriesDataUpdate;
    private linksSeriesDataUpdate;
    protected _handleAdjacencyClick: (params: ExtendEventParam) => void;
    protected _handleRelatedClick: (params: ExtendEventParam) => void;
    protected _handleClearEmpty: () => void;
    protected _handleNodeAdjacencyClick: (element: IElement) => void;
    protected _handleLinkAdjacencyClick: (element: IGlyphElement) => void;
    protected _handleNodeRelatedClick: (element: IElement) => void;
    protected _handleLinkRelatedClick: (element: IGlyphElement) => void;
    protected initTooltip(): void;
    _setNodeOrdinalColorScale(): void;
    getNodeList(): any;
    _getNodeNameFromData(datum: Datum): any;
    extractNamesFromTree(tree: any, categoryName: string): Set<unknown>;
    getDimensionField(): string[];
    getMeasureField(): string[];
    getRawDataStatisticsByField(field: string, isNumeric?: boolean): {
        values?: any[];
        min?: number;
        max?: number;
    };
    private _collectByField;
    onLayoutEnd(ctx: any): void;
    getDefaultShapeType(): string;
    protected _noAnimationDataKey(datum: Datum, index: number): unknown | undefined;
    getActiveMarks(): IMark[];
}
export declare const registerSankeySeries: () => void;
