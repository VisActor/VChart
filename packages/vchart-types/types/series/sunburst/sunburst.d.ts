import type { Datum } from '../../typings';
import type { ISunburstSeriesSpec } from './interface';
import type { SeriesMarkMap } from '../interface';
import { SeriesTypeEnum } from '../interface/type';
import type { IMark } from '../../mark/interface';
import { PolarSeries } from '../polar/polar';
export declare class SunburstSeries extends PolarSeries<any> {
    protected _spec: ISunburstSeriesSpec;
    static readonly type: string;
    type: SeriesTypeEnum;
    static readonly mark: SeriesMarkMap;
    private _sunburstMark;
    private _labelMark;
    protected _categoryField: string;
    protected _valueField: string;
    private _centerX;
    private _centerY;
    private _offsetX;
    private _offsetY;
    private _startAngle;
    private _endAngle;
    private __innerRadius;
    private __outerRadius;
    private _gap;
    private _labelLayout;
    private _labelAutoVisible?;
    private _label;
    private _sunburst;
    setCategoryField(f: string): string;
    getCategoryField(): string;
    setValueField(f: string): string;
    getValueField(): string;
    getDimensionField(): string[];
    getMeasureField(): string[];
    setAttrFromSpec(): void;
    protected initData(): void;
    getStatisticFields(): {
        key: string;
        operations: ("max" | "min" | "values")[];
    }[];
    protected _addDataIndexAndKey(): void;
    initMark(): void;
    initMarkStyle(): void;
    private _initArcMark;
    private _initArcMarkStyle;
    private _initLabelMark;
    private _initLabelMarkStyle;
    protected initTooltip(): void;
    initAnimation(): void;
    initEvent(): void;
    onLayoutEnd(ctx: any): void;
    private _computeRadius;
    private _computeLevel;
    getGroupFields(): string[];
    getStackGroupFields(): string[];
    getStackValueField(): string;
    protected _noAnimationDataKey(datum: Datum, index: number): unknown | undefined;
    getActiveMarks(): IMark[];
}
export declare const registerSunBurstSeries: () => void;
